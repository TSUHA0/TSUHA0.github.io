[{"categories":["OS","汇编语言"],"content":"汇编杂谈-逻辑运算指令和移位指令","date":"2023-05-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/","tags":["OS","汇编语言"],"title":"汇编杂谈-逻辑运算指令和移位指令","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/"},{"categories":["OS","汇编语言"],"content":"逻辑运算指令 AND / TEST, TEST 执行 AND 指令但是不更新寄存器，只更新 EFLAGS SUB / CMP，同上，CMP 指令不更新寄存器，但更新 EFLAGS OR XOR NOT TEST 和 CMP 指令会更新 EFLAGS 寄存器，详见 EFLAGS 寄存器 例: cmp oprd 1, oprd 2 当执行到 CMP 指令的时候会读取这两个寄存器的内容，并加以减法运算，结果本身不保留，并按照结果设置符号位（属算术运算）。 如何判断大小： 若执行指令后:ZF=1, 则说明两个数相等，因为 zero 为 1 说明结果为0. ","date":"2023-05-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/:1:0","tags":["OS","汇编语言"],"title":"汇编杂谈-逻辑运算指令和移位指令","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/"},{"categories":["OS","汇编语言"],"content":"移位指令 CLC 进位清零 SHL / SHR 移位 ROL / ROR 循环移位 RCL / RCR 带进位循环移位 是否带进位区别如下： 不带进位 xchg bx, bx clc mov al, 0b0100_0101 rol al, 1 ; al from: 0x45 -\u003e 0b0100_0101 ; al to: 0x8a -\u003e 0b1000_1010 带进位 clc; CF置为0 mov al, 0b1111_1111 rcl al, 1 rcl al, 1 ; al from: 0xff -\u003e 0b01111_1111 ; al to: 0xfe -\u003e 0b1111_1110, 最左侧的1送入CF，CF的0送入第0位 ; al to: 0xfd -\u003e 0b1111_1101，最左侧的1送入CF，CF的1送入第0位 ","date":"2023-05-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/:2:0","tags":["OS","汇编语言"],"title":"汇编杂谈-逻辑运算指令和移位指令","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4/"},{"categories":["makefile"],"content":"% 表示通配符，%\u003c 表示输入，%@ 表示输出 %.bin: %.asm nasm %\u003c -o %@ ","date":"2023-04-05","objectID":"/posts/%E6%9D%82%E8%B0%88/Makefile%E9%80%9A%E9%85%8D%E7%AC%A6/:0:0","tags":["makefile"],"title":"Makefile通配符","uri":"/posts/%E6%9D%82%E8%B0%88/Makefile%E9%80%9A%E9%85%8D%E7%AC%A6/"},{"categories":["OS","汇编语言"],"content":"汇编杂谈-8086寄存器","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/","tags":["OS","汇编语言"],"title":"汇编杂谈-8086寄存器","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/"},{"categories":["OS","汇编语言"],"content":"8086 寄存器 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/:1:0","tags":["OS","汇编语言"],"title":"汇编杂谈-8086寄存器","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/"},{"categories":["OS","汇编语言"],"content":"寄存器 rax,eax,ax,ah,al 关系 |63..32|31..16|15-8|7-0| |AH.|AL.| |AX.....| |EAX............| |RAX...................| ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/:2:0","tags":["OS","汇编语言"],"title":"汇编杂谈-8086寄存器","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/"},{"categories":["OS","汇编语言"],"content":"寄存器种类和用途 寄存器 描述 AX 累加数据结果 BX 数据段数据指针 CX 字符串和循环计数器 DX I/O 指针 SI 源数据指针 DI 目的数据指针 SP 栈指针 BP 栈数据指针 CS 代码段寄存器 DS 数据段寄存器 SS 栈段寄存器 ES 额外的寄存器 IP cs：ip 组合用于下一条指令地址 EFLAGS 存储状态和控制信息 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/:3:0","tags":["OS","汇编语言"],"title":"汇编杂谈-8086寄存器","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/"},{"categories":["OS","汇编语言"],"content":"EFLAGS 寄存器 EFLAGS 寄存器是一个 32 位的寄存器，用于存储程序的状态和控制信息。EFLAGS 寄存器的各位表示的意思如下¹²： CF (bit 0) [Carry flag] 进位标志，表示无符号数运算是否产生进位或借位。 PF (bit 2) [Parity flag] 奇偶标志，表示运算结果的最低有效字节中1的个数是否为偶数。 AF (bit 4) [Adjust flag] 辅助进位标志，表示运算结果的第3位是否产生进位或借位，用于BCD运算。 ZF (bit 6) [Zero flag] 零标志，表示运算结果是否为0。 SF (bit 7) [Sign flag] 符号标志，表示运算结果的符号位，0为正，1为负。 TF (bit 8) [Trap flag] 陷阱标志，表示是否开启单步调试模式。 IF (bit 9) [Interrupt enable flag] 中断允许标志，表示是否允许外部中断。 DF (bit 10) [Direction flag] 方向标志，表示串操作指令的处理方向，0为递增，1为递减。 OF (bit 11) [Overflow flag] 溢出标志，表示有符号数运算是否产生溢出。 IOPL (bit 12 and 13) [I/O privilege level field] I/O特权级字段，表示当前任务的I/O特权级，用于访问I/O端口。 NT (bit 14) [Nested task flag] 嵌套任务标志，表示当前任务是否是一个嵌套调用的任务。 RF (bit 16) [Resume flag] 恢复标志，表示是否忽略调试异常。 VM (bit 17) [Virtual-8086 mode flag] 虚拟8086模式标志，表示是否处于虚拟8086模式下。 AC (bit 18) [Alignment check flag] 对齐检查标志，表示是否开启对齐检查功能。 VIF (bit 19) [Virtual interrupt flag] 虚拟中断标志，表示虚拟8086模式下的中断允许状态。 VIP (bit 20) [Virtual interrupt pending flag] 虚拟中断挂起标志，表示虚拟8086模式下是否有中断请求等待处理。 ID (bit 21) [ID flag] ID标志，表示CPU是否支持CPUID指令。 源: 与必应的对话， 2023/5/5 (1) 详解EFLAGS寄存器（标志寄存器）_李耀辉@1的博客-CSDN博客. . (2) x86—EFLAGS寄存器详解_随心随意随缘的博客-CSDN博客. . (3) x86—EFLAGS寄存器详解【转载】 - 阿阿阿怪 - 博客园 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/:4:0","tags":["OS","汇编语言"],"title":"汇编杂谈-8086寄存器","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-8086%E5%AF%84%E5%AD%98%E5%99%A8/"},{"categories":["OS","汇编语言"],"content":"汇编杂谈-光标设置","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/","tags":["OS","汇编语言"],"title":"汇编杂谈-光标设置","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/"},{"categories":["OS","汇编语言"],"content":"汇编杂谈-光标设置 调整 CRT 阴极射线管控制器光标位置 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/:0:0","tags":["OS","汇编语言"],"title":"汇编杂谈-光标设置","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/"},{"categories":["OS","汇编语言"],"content":"调整光标位置 CRT_ADDR_REG equ 0x3d4 CRT_DATA_REG equ 0x3d5 CRT_CURSOR_HIGH equ 0xe CRT_CURSOR_LOW equ 0xf ; 每行80个字符，跳转到15行需要设置15*80 mov ax, 15 * 80 call set_cursor set_cursor: ; ax 传递参数 push bx push dx mov bx, ax mov dx, CRT_ADDR_REG mov al, CRT_CURSOR_LOW out dx, al mov dx, CRT_DATA_REG mov al, bl out dx, al mov dx, CRT_ADDR_REG mov al, CRT_CURSOR_HIGH out dx, al mov dx, CRT_DATA_REG mov al, bh out dx, al pop dx pop bx ret ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/:1:0","tags":["OS","汇编语言"],"title":"汇编杂谈-光标设置","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/"},{"categories":["OS","汇编语言"],"content":"获取光标位置 get_cursor: ; ax 传递参数 push bx push dx mov dx, CRT_ADDR_REG mov al, CRT_CURSOR_LOW out dx, al mov dx, CRT_DATA_REG in al, dx mov bl, al mov dx, CRT_ADDR_REG mov al, CRT_CURSOR_HIGH out dx, al mov dx, CRT_DATA_REG in al, dx mov bh, al mov ax, bx pop dx pop bx ret ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/:2:0","tags":["OS","汇编语言"],"title":"汇编杂谈-光标设置","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%85%89%E6%A0%87%E8%AE%BE%E7%BD%AE/"},{"categories":["OS","汇编语言"],"content":"汇编杂谈-函数调用","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/","tags":["OS","汇编语言"],"title":"汇编杂谈-函数调用","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"},{"categories":["OS","汇编语言"],"content":"jmp指令 - 知乎 jmp short start 占用两个字节，jmp 指令一个字节，地址一个字节，-128 - 127 jmp near start 占用三个字节，jmp 指令一个字节，地址两个字节，-32768 - 32767 jmp far cs:ip，同时修改 CS 和 IP，五个字节，CS 和 IP 各占两个字节。 ; far function call 0:print_far ; push cs, push ip, jmp far print_far: ;使用retf返回 retf ; pop ip, pop cs ; 与上面的不同 call print print: ret ; pop ip 汇编杂谈-内中断 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/:0:0","tags":["OS","汇编语言"],"title":"汇编杂谈-函数调用","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"},{"categories":["OS","汇编语言"],"content":"汇编杂谈-内中断","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%86%85%E4%B8%AD%E6%96%AD/","tags":["OS","汇编语言"],"title":"汇编杂谈-内中断","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%86%85%E4%B8%AD%E6%96%AD/"},{"categories":["OS","汇编语言"],"content":"0x000 ~ 0x3ff 的 1kb 为中断向量表，一个向量由 cs:ip 组成，共 32 位 4B，因此最多存 256 个中断向量。 例如要向第 0x80 中断向量注册 print 函数，可以使用如下代码，注意需要用 iret 返回，以为多向栈压入了 flags 。 mov word [0x80 * 4], print mov word [0x80 * 4 + 2], 0 int 0x80 print: ; todo iret; pop ip, pop cs, pop flags ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%86%85%E4%B8%AD%E6%96%AD/:0:0","tags":["OS","汇编语言"],"title":"汇编杂谈-内中断","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%86%85%E4%B8%AD%E6%96%AD/"},{"categories":["OS","汇编语言"],"content":"1 隐含寻址 含义：操作数隐含的由累加器给出。（即某指令由固定的操作数，不需要给出） cwd ; 把ax中的内容按符号位拓展成dx,ax双字 clc ; cf置为0 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:1:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"2 立即寻址 操作数为立即数。 常用于给寄存器或内存单元赋初值，只能用于源操作数，不能用于目的操作数 mov al, 34H mov ax, 1234H ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:2:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"3 寄存器寻址 操作数存放在 CPU 内部的寄存器中。 mov cx, ax ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:3:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"4 直接寻址 操作数地址的 16 位偏移量直接在指令中给出（存放于代码区），而操作数存放在数据区。（操作数的地址为 DS 左移四位加上该 16 位偏移量） mov ax, [1200H] ; ds * 16 + 1200H ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:4:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"5 寄存器间接寻址 操作数在存储器中，操作数地址的 16 位偏移量在寄存器中（SI、DI、BX、BP）。若以 SI、DI、BX 间接寻址，操作数在数据段中，操作数地址为 DS 左移四位加上 SI、DI、BX 其中之一的内容。若以 BP 间接寻址，则操作数在堆栈段区域内，操作数地址为 SS 左移四位加上 BP 的内容。 [!note] SI、DI、BX 配合 DS BP 配合 SS mov ax, [si] ; ds * 16 + si ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:5:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"6 寄存器相对寻址 在寄存器相对寻址方式中，操作数存放在存储器中，操作数的16位段内偏移地址是由 SI, DI, BX, BP 之一的内容，再加上指令中所指出的8位或者16位相对地址偏移量而得到的。 mov ax, [si + 0x10] ; ds * 16 + si + 0x10 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:6:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"7 基址变址寻址 在8086/8088中，通常把 BX，BP 作为基址寄存器，而把 SI、DI 作为变址寄存器。将这两种寄存器联合起来进行的寻址就称为基址、变址寻址。 在基址、变址寻址方式中，操作数存放在存储器中，操作数的16位段内偏移地址是由基址寄存器内容(BX或BP内容)，再加上变址寄存器内容(SI或DI内容)而得到的。 mov ax, [bx + si] ; ds * 16 + bx + si mov bx, [bp + si] ; ss * 16 + bp + si ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:7:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"8 基址变址相对寻址 基址变址相对寻址方式实际上是基址变址寻址方式的扩充。即操作数存放在存储器中，操作数的16位段内偏移地址是由基址、变址方式得到的地址再加上由指令指明的8位或16位的相对偏移地址而得到的。 mov ax, [bx + si + 1030H] ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:8:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":["OS","汇编语言"],"content":"9 注意 内存操作数地址只能由 BX、BP、SI、DI 给出，它们的组合也不是任意的。 寄存器间接寻址[SI]、[DI]、[BX]、[BP]。 寄存器相对寻址[SI+X]、[DI+X]、[BX+X]、[BP+X]。 基址加变址寻址[BX+SI+X]、[BX+DI+X]、[BP+SI+X]、[BP+DI+X]。 ","date":"2023-04-05","objectID":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/:9:0","tags":["OS","汇编语言"],"title":"汇编杂谈-寻址","uri":"/posts/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%9D%82%E8%B0%88-%E5%AF%BB%E5%9D%80/"},{"categories":null,"content":"资讯 TSUHA0/TSUHA0 /README.md ### Hi there 👋 🌱 I’m currently learning cpp, rust \u003c!-- **TSUHA0/TSUHA0** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile. Here are some ideas to get you started: - 🔭 I’m currently working on ... - 🌱 I’m currently learning ... - 👯 I’m looking to collaborate on ... - 🤔 I’m looking for help with ... - 💬 Ask me about ... - 📫 How to reach me: ... - 😄 Pronouns: ... - ⚡ Fun fact: ... --\u003e 关于我 角色： 大学生 研究生 研究生 \u0026 实习生 职业： 数通开发 ","date":"2021-09-07","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"}]